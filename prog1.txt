010000001	// ld r4, [1]
010010000	// ld r5, [0]
000000011	// cmp r4, r0
111000010	// beq continue_zero
110000111	// j end_zero
000010011	// cmp r5, r0
111000010	// beq finish_zero
110000100	// j end_zero
011000011	// str r4, [3]
011010010	// str r5, [2]
001110001	// movr r7, r0  		# DONE
001001001	// movr r4, r2
001011101	// movr r5, r3
101000111	// sh r4, 7
011000010	// str r4, [2]
000000011	// cmp r4, r0
111000111	// beq end_abs
000001010	// not r4, r2
000011110	// not r5, r3
100010001	// addi r5, 1
001000011	// addc r4, r0
001001001	// movr r4, r2
001011101	// movr r5, r3
001001000	// movl r4, r2
001100000	// movl r6, r0
001111000	// movl r7, r2
101110111	// sh r7, 7
000110011	// cmp r7, r0
111000010	// beq continue
110000111	// j end_norm
101001111	// sh r4, -1
101011111	// sh r5, -1
001000011	// addc r4, r0
100100001	// addi r6, 1
001001001	// movr r4, r2
110110110	// j normalize_loop
100101001	// addi r6, -7
001100101	// movr r6, r1
000100110	// not r6, r1
100100001	// addi r6, 1
100100111	// addi r6, 7
100100111	// addi r6, 7
100100001	// addi r6, 1
101001111	// sh r4, -1
101011111	// sh r5, -1
001000011	// addc r4, r0
010110010	// ld r7, [2]
101111001	// sh r7, -7
101101110	// sh r6, -2
001100101	// movr r6, r1
000110100	// add r7, r1
001100000	// movl r6, r0
101001111	// sh r4, -1
001100011	// addc r6, r0
101101111	// sh r6, -1
001101001	// movr r6, r2
000111000	// add r7, r2
101011111	// sh r5, -1
001000011	// addc r4, r0
101001111	// sh r4, -1
001110011	// addc r7, r0
101011111	// sh r5, -1
001000011	// addc r4, r0
011110011	// str r7, [3]
011000010	// str r4, [2]
001110001	// movr r7, r0
